package main

import (
	"time"

	"github.com/PaulSonOfLars/gotgbot/v2"
	"github.com/PaulSonOfLars/gotgbot/v2/ext"
	"golang.org/x/text/language"
	plurals "golang.org/x/text/message"
	"gorm.io/gorm/clause"
)

func Accept(bot *gotgbot.Bot, context *ext.Context) error {
	// prt will replace fmt package to format text according plurals defined in utils package
	// If no plural rule matched it will be ignored and processed as usual formatting
	prt := plurals.NewPrinter(language.Russian)

	message := context.EffectiveMessage
	victim := message.Entities[0].User
	if victim.Id != context.EffectiveSender.User.Id {
		_, err := context.Update.CallbackQuery.Answer(bot, &gotgbot.AnswerCallbackQueryOpts{
			Text: GetNope(),
		})
		return err
	}
	_, err := context.Update.CallbackQuery.Answer(bot, &gotgbot.AnswerCallbackQueryOpts{})
	if err != nil {
		return err
	}
	player := message.Entities[1].User
	busy["russianroulette"] = false
	busy["russianroulettePending"] = false
	busy["russianrouletteInProgress"] = true
	defer func() { busy["russianrouletteInProgress"] = false }()
	success := []string{"%v –æ—Å—Ç–∞—ë—Ç—Å—è –≤ –∂–∏–≤—ã—Ö. –•–º... –º–æ–∂–µ—Ç –ø–æ—Ä–æ—Ö –æ—Ç—Å—ã—Ä–µ–ª?", "–í –≤–æ–∑–¥—É—Ö–µ –ø–æ–≤–∏—Å–ª–∞ —Ç–∏—à–∏–Ω–∞. %v –æ—Å—Ç–∞—ë—Ç—Å—è –≤ –∂–∏–≤—ã—Ö.", "%v —Å–µ–≥–æ–¥–Ω—è –∑–∞–Ω–æ–≤–æ —Ä–æ–¥–∏–ª—Å—è.", "%v –æ—Å—Ç–∞—ë—Ç—Å—è –≤ –∂–∏–≤—ã—Ö. –•–º... —è –≤–µ–¥—å –∑–∞—Ä—è–¥–∏–ª –µ–≥–æ?", "%v –æ—Å—Ç–∞—ë—Ç—Å—è –≤ –∂–∏–≤—ã—Ö. –ü—Ä–∏–∫–æ–ª—å–Ω–æ, –∞ –¥–∞–≤–∞–π –ø—Ä–æ–≤–µ—Ä–∏–º –Ω–∞ –∫–æ–º-–Ω–∏–±—É–¥—å –¥—Ä—É–≥–æ–º?"}
	invincible := []string{"–ø—É–ª—è –æ—Ç—Å–∫–æ—á–∏–ª–∞ –æ—Ç –≥–æ–ª–æ–≤—ã %v –∏ —É–ª–µ—Ç–µ–ª–∞ –≤ –¥—Ä—É–≥–æ–π —á–∞—Ç.", "%v –ø–æ—Ö–º—É—Ä–∏–ª –±—Ä–æ–≤–∏ –∏ –æ—Ç–∫–ª–µ–∏–ª —Ä–∞—Å–ø–ª—é—â–µ–Ω–Ω—É—é –ø—É–ª—é —Å–æ —Å–≤–æ–µ–π –≥–æ–ª–æ–≤—ã.", "–Ω–æ –Ω–∏—á–µ–≥–æ –Ω–µ –ø—Ä–æ–∏–∑–æ—à–ª–æ. %v –≤–∑–≥–ª—è–Ω—É–ª –Ω–∞ —Ä–µ–≤–æ–ª—å–≤–µ—Ä, –æ–Ω –±—ã–ª –Ω–µ–∏—Å–ø—Ä–∞–≤–µ–Ω.", "–ø—É–ª—è –ø—Ä–æ—à–ª–∞ –Ω–∞–≤—ã–ª–µ—Ç, –Ω–æ –Ω–µ –æ—Å—Ç–∞–≤–∏–ª–∞ –∫–∞–∫–∏—Ö-–ª–∏–±–æ —Å–ª–µ–¥–æ–≤ –Ω–∞ %v."}
	fail := []string{"–º–æ–∑–≥–∏ %v —Ä–∞–∑–ª–µ—Ç–µ–ª–∏—Å—å –ø–æ —á–∞—Ç—É!", "%v —É–ø–∞–ª —Å–æ —Å—Ç—É–ª–∞ –∏ –µ–≥–æ –∫—Ä–æ–≤—å —Ä–∞—Å—Ç–µ–∫–ª–∞—Å—å –ø–æ –º–µ—Å—Å–µ–¥–∂—É.", "%v –∑–∞–º–µ—Ä –∏ —Å–ø—É—Å—Ç—è —Å–µ–∫—É–Ω–¥—É —É–ø–∞–ª –Ω–∞ —Å—Ç–æ–ª.", "–ø—É–ª—è –µ–¥–≤–∞ –Ω–µ –∑–∞–¥–µ–ª–∞ –∫–æ–≥–æ-—Ç–æ –∏–∑ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ —á–∞—Ç–∞! –ê? –ß—Ç–æ? –ê, %v –º—ë—Ä—Ç–≤, –¥–∞.", "–∏ –≤ –≤–æ–∑–¥—É—Ö–µ –ø–æ–≤–∏—Å–ª–∞ —Ç–∏—à–∏–Ω–∞. –í—Å–µ –Ω–∞—á–∞–ª–∏ –æ–≥–ª—è–¥—ã–≤–∞—Ç—å—Å—è, –∫–æ–≥–¥–∞ %v —É–∂–µ –±—ã–ª –º—ë—Ä—Ç–≤."}
	prefix := prt.Sprintf("–î—É—ç–ª—å! %v –ø—Ä–æ—Ç–∏–≤ %v!\n", MentionUser(player), MentionUser(victim))
	_, _, err = Bot.EditMessageText(prt.Sprintf("%v–ó–∞—Ä—è–∂–∞—é –æ–¥–∏–Ω –ø–∞—Ç—Ä–æ–Ω –≤ —Ä–µ–≤–æ–ª—å–≤–µ—Ä –∏ –ø—Ä–æ–∫—Ä—É—á–∏–≤–∞—é –±–∞—Ä–∞–±–∞–Ω.", prefix), &gotgbot.EditMessageTextOpts{ChatId: context.EffectiveChat.Id, MessageId: message.MessageId, ReplyMarkup: gotgbot.InlineKeyboardMarkup{}, ParseMode: gotgbot.ParseModeHTML})
	if err != nil {
		return err
	}
	time.Sleep(time.Second * 2)
	_, _, err = Bot.EditMessageText(prt.Sprintf("%v–ö–ª–∞–¥—É —Ä–µ–≤–æ–ª—å–≤–µ—Ä –Ω–∞ —Å—Ç–æ–ª –∏ —Ä–∞—Å–∫—Ä—É—á–∏–≤–∞—é –µ–≥–æ.", prefix), &gotgbot.EditMessageTextOpts{ChatId: context.EffectiveChat.Id, MessageId: message.MessageId, ReplyMarkup: gotgbot.InlineKeyboardMarkup{}, ParseMode: gotgbot.ParseModeHTML})
	if err != nil {
		return err
	}
	time.Sleep(time.Second * 2)
	if RandInt(1, 360)%2 == 0 {
		player, victim = victim, player
	}
	_, _, err = Bot.EditMessageText(prt.Sprintf("%v–†–µ–≤–æ–ª—å–≤–µ—Ä –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç—Å—è –Ω–∞ %v, –ø–µ—Ä–≤—ã–π —Ö–æ–¥ –∑–∞ –Ω–∏–º.", prefix, MentionUser(victim)), &gotgbot.EditMessageTextOpts{ChatId: context.EffectiveChat.Id, MessageId: message.MessageId, ReplyMarkup: gotgbot.InlineKeyboardMarkup{}, ParseMode: gotgbot.ParseModeHTML})
	if err != nil {
		return err
	}
	bullet := RandInt(1, 5)
	for i := 1; i <= bullet; i++ {
		time.Sleep(time.Second * 2)
		prefix = prt.Sprintf("–î—É—ç–ª—å! %v –ø—Ä–æ—Ç–∏–≤ %v, —Ä–∞—É–Ω–¥ %v:\n%v –±–µ—Ä—ë—Ç —Ä–µ–≤–æ–ª—å–≤–µ—Ä, –ø—Ä–∏—Å—Ç–∞–≤–ª—è–µ—Ç –µ–≥–æ –∫ –≥–æ–ª–æ–≤–µ –∏...\n", MentionUser(player), MentionUser(victim), i, MentionUser(victim))
		_, _, err = Bot.EditMessageText(prefix, &gotgbot.EditMessageTextOpts{ChatId: context.EffectiveChat.Id, MessageId: message.MessageId, ReplyMarkup: gotgbot.InlineKeyboardMarkup{}, ParseMode: gotgbot.ParseModeHTML})
		if err != nil {
			return err
		}
		if bullet != i {
			time.Sleep(time.Second * 2)
			_, _, err := Bot.EditMessageText(prt.Sprintf("%vüçæ %v", prefix, prt.Sprintf(success[RandInt(0, len(success)-1)], MentionUser(victim))), &gotgbot.EditMessageTextOpts{ChatId: context.EffectiveChat.Id, MessageId: message.MessageId, ReplyMarkup: gotgbot.InlineKeyboardMarkup{}, ParseMode: gotgbot.ParseModeHTML})
			if err != nil {
				return err
			}
			player, victim = victim, player
		}
	}
	time.Sleep(time.Second * 2)
	PlayerChatMember, err := Bot.GetChatMember(context.EffectiveChat.Id, player.Id, nil)
	if err != nil {
		return err
	}
	VictimChatMember, err := Bot.GetChatMember(context.EffectiveChat.Id, victim.Id, nil)
	if err != nil {
		return err
	}
	if (PlayerChatMember.GetStatus() == "creator" || PlayerChatMember.GetStatus() == "administrator") && (VictimChatMember.GetStatus() == "creator" || VictimChatMember.GetStatus() == "administrator") {
		_, _, err = Bot.EditMessageText(prt.Sprintf("%v–ü—É–ª—è –æ—Ç—Å–∫–∞–∫–∏–≤–∞–µ—Ç –æ—Ç –≥–æ–ª–æ–≤—ã %v –∏ –ª–µ—Ç–∏—Ç –≤ –≥–æ–ª–æ–≤—É %v.", prefix, MentionUser(victim), MentionUser(player)), &gotgbot.EditMessageTextOpts{ChatId: context.EffectiveChat.Id, MessageId: message.MessageId, ReplyMarkup: gotgbot.InlineKeyboardMarkup{}, ParseMode: gotgbot.ParseModeHTML})
		if err != nil {
			return err
		}
		time.Sleep(time.Second * 2)
		_, _, err = Bot.EditMessageText(prt.Sprintf("%v–ü—É–ª—è –æ—Ç—Å–∫–∞–∫–∏–≤–∞–µ—Ç –æ—Ç –≥–æ–ª–æ–≤—ã %v –∏ –ª–µ—Ç–∏—Ç –≤ –≥–æ–ª–æ–≤—É %v.", prefix, MentionUser(player), MentionUser(victim)), &gotgbot.EditMessageTextOpts{ChatId: context.EffectiveChat.Id, MessageId: message.MessageId, ReplyMarkup: gotgbot.InlineKeyboardMarkup{}, ParseMode: gotgbot.ParseModeHTML})
		if err != nil {
			return err
		}
		time.Sleep(time.Second * 2)
		_, _, err = Bot.EditMessageText(prt.Sprintf("%v–ü—É–ª—è –æ—Ç—Å–∫–∞–∫–∏–≤–∞–µ—Ç –æ—Ç –≥–æ–ª–æ–≤—ã %v –∏ –ª–µ—Ç–∏—Ç –≤ –≥–æ–ª–æ–≤—É %v.", prefix, MentionUser(victim), MentionUser(player)), &gotgbot.EditMessageTextOpts{ChatId: context.EffectiveChat.Id, MessageId: message.MessageId, ReplyMarkup: gotgbot.InlineKeyboardMarkup{}, ParseMode: gotgbot.ParseModeHTML})
		if err != nil {
			return err
		}
		time.Sleep(time.Second * 2)
		var userID int64
		rows, err := DB.Model(&Stats{}).Where("stat_type = 3").Order("last_update desc").Select("context_id").Limit(100).Rows()
		if err != nil {
			return err
		}
		defer rows.Close()
		for rows.Next() {
			rows.Scan(&userID)
			ricochetVictim, err := Bot.GetChatMember(context.EffectiveChat.Id, userID, nil)
			if err != nil {
				continue
			}
			if ricochetVictim.GetStatus() == "member" {
				VictimChatMember = ricochetVictim
				*victim = ricochetVictim.GetUser()
				prefix = prt.Sprintf("%v–ü—É–ª—è –æ—Ç—Å–∫–∞–∫–∏–≤–∞–µ—Ç –æ—Ç –≥–æ–ª–æ–≤—ã %v –∏ –ª–µ—Ç–∏—Ç –≤ –≥–æ–ª–æ–≤—É %v.\n", prefix, MentionUser(player), MentionUser(victim))
				_, _, err = Bot.EditMessageText(prefix, &gotgbot.EditMessageTextOpts{ChatId: context.EffectiveChat.Id, MessageId: message.MessageId, ReplyMarkup: gotgbot.InlineKeyboardMarkup{}, ParseMode: gotgbot.ParseModeHTML})
				if err != nil {
					return err
				}
				player = &bot.User
				rows.Close()
				break
			}
		}
	}
	if IsAdmin(victim.Id) {
		_, _, err = Bot.EditMessageText(prt.Sprintf("%vüòà –ù–∞–≤–æ–¥–∏—Ç —Ä–µ–≤–æ–ª—å–≤–µ—Ä –Ω–∞ %v –∏ —Å—Ç—Ä–µ–ª—è–µ—Ç.", prefix, MentionUser(player)), &gotgbot.EditMessageTextOpts{ChatId: context.EffectiveChat.Id, MessageId: message.MessageId, ReplyMarkup: gotgbot.InlineKeyboardMarkup{}, ParseMode: gotgbot.ParseModeHTML})
		if err != nil {
			return err
		}
		time.Sleep(time.Second * 3)
		var duelist Duelist
		result := DB.Model(Duelist{}).Where(player.Id).First(&duelist)
		if result.RowsAffected == 0 {
			duelist.UserID = player.Id
			duelist.Kills = 0
			duelist.Deaths = 0
		}
		duelist.Deaths++
		result = DB.Clauses(clause.OnConflict{
			UpdateAll: true,
		}).Create(&duelist)
		if result.Error != nil {
			return result.Error
		}
		_, err = Bot.RestrictChatMember(context.EffectiveChat.Id, PlayerChatMember.GetUser().Id, gotgbot.ChatPermissions{CanSendMessages: false}, &gotgbot.RestrictChatMemberOpts{UntilDate: time.Now().Add(time.Second * time.Duration(60*duelist.Deaths)).Unix()})
		if err != nil {
			return err
		}
		_, _, err = Bot.EditMessageText(prt.Sprintf("%vüòà –ù–∞–≤–æ–¥–∏—Ç —Ä–µ–≤–æ–ª—å–≤–µ—Ä –Ω–∞ %v –∏ —Å—Ç—Ä–µ–ª—è–µ—Ç.\n–Ø —Ö–∑ –∫–∞–∫ —ç—Ç–æ –æ–±—ä—è—Å–Ω–∏—Ç—å, –Ω–æ %v –ø–æ–±–µ–¥–∏—Ç–µ–ª—å!\n%v –æ—Ç–ø—Ä–∞–≤–∏–ª—Å—è –Ω–∞ —Ä–µ—Å–ø–∞–≤–Ω –Ω–∞ %d –º–∏–Ω.", prefix, MentionUser(player), MentionUser(victim), MentionUser(player), duelist.Deaths), &gotgbot.EditMessageTextOpts{ChatId: context.EffectiveChat.Id, MessageId: message.MessageId, ReplyMarkup: gotgbot.InlineKeyboardMarkup{}, ParseMode: gotgbot.ParseModeHTML})
		if err != nil {
			return err
		}
		return err
	}
	if VictimChatMember.GetStatus() == "creator" || VictimChatMember.GetStatus() == "administrator" {
		prefix = prt.Sprintf("%vüí• %v", prefix, prt.Sprintf(invincible[RandInt(0, len(invincible)-1)], MentionUser(victim)))
		_, _, err := Bot.EditMessageText(prefix, &gotgbot.EditMessageTextOpts{ChatId: context.EffectiveChat.Id, MessageId: message.MessageId, ReplyMarkup: gotgbot.InlineKeyboardMarkup{}, ParseMode: gotgbot.ParseModeHTML})
		if err != nil {
			return err
		}
		time.Sleep(time.Second * 2)
		_, _, err = Bot.EditMessageText(prt.Sprintf("%v\n–ü–æ—Ö–æ–∂–µ, —É –Ω–∞—Å –Ω–∏—á—å—è.", prefix), &gotgbot.EditMessageTextOpts{ChatId: context.EffectiveChat.Id, MessageId: message.MessageId, ReplyMarkup: gotgbot.InlineKeyboardMarkup{}, ParseMode: gotgbot.ParseModeHTML})
		if err != nil {
			return err
		}
		return err
	}
	prefix = prt.Sprintf("%vüí• %v", prefix, prt.Sprintf(fail[RandInt(0, len(fail)-1)], MentionUser(victim)))
	_, _, err = Bot.EditMessageText(prefix, &gotgbot.EditMessageTextOpts{ChatId: context.EffectiveChat.Id, MessageId: message.MessageId, ReplyMarkup: gotgbot.InlineKeyboardMarkup{}, ParseMode: gotgbot.ParseModeHTML})
	if err != nil {
		return err
	}
	time.Sleep(time.Second * 2)
	var VictimDuelist Duelist
	result := DB.Model(Duelist{}).Where(victim.Id).First(&VictimDuelist)
	if result.RowsAffected == 0 {
		VictimDuelist.UserID = victim.Id
		VictimDuelist.Kills = 0
		VictimDuelist.Deaths = 0
	}
	VictimDuelist.Deaths++
	result = DB.Clauses(clause.OnConflict{
		UpdateAll: true,
	}).Create(&VictimDuelist)
	if result.Error != nil {
		return result.Error
	}
	if player.IsBot {
		VictimDuelist.Deaths = 1
	}
	_, err = Bot.RestrictChatMember(context.EffectiveChat.Id, VictimChatMember.GetUser().Id, gotgbot.ChatPermissions{CanSendMessages: false}, &gotgbot.RestrictChatMemberOpts{UntilDate: time.Now().Add(time.Second * time.Duration(60*VictimDuelist.Deaths)).Unix()})
	if err != nil {
		return err
	}
	_, _, err = Bot.EditMessageText(prt.Sprintf("%v\n–ü–æ–±–µ–¥–∏—Ç–µ–ª—å –¥—É—ç–ª–∏: %v.\n%v –æ—Ç–ø—Ä–∞–≤–∏–ª—Å—è –Ω–∞ —Ä–µ—Å–ø–∞–≤–Ω –Ω–∞ %d –º–∏–Ω.", prefix, MentionUser(player), MentionUser(victim), VictimDuelist.Deaths), &gotgbot.EditMessageTextOpts{ChatId: context.EffectiveChat.Id, MessageId: message.MessageId, ReplyMarkup: gotgbot.InlineKeyboardMarkup{}, ParseMode: gotgbot.ParseModeHTML})
	if err != nil {
		return err
	}
	var PlayerDuelist Duelist
	result = DB.Model(Duelist{}).Where(victim.Id).First(&PlayerDuelist)
	if result.RowsAffected == 0 {
		PlayerDuelist.UserID = victim.Id
		PlayerDuelist.Kills = 0
		PlayerDuelist.Deaths = 0
	}
	PlayerDuelist.Kills++
	result = DB.Clauses(clause.OnConflict{
		UpdateAll: true,
	}).Create(&PlayerDuelist)
	if result.Error != nil {
		return result.Error
	}
	return err
}
